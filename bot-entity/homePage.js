const {checkAuthorization} = require('../utils/axios');
const {slackApp} = require('./slack');
slackApp.event('app_home_opened', async ({event, client}) => {
  console.log('trying to do');
  const data = await checkAuthorization(event.user);
  console.log(data);
  const {users, isSync} = data;
  const [user] = users;
  try {
    await client.views.publish({
      user_id: event.user,
      view: {
        type: 'home',
        blocks: [
          {
            type: 'header',
            text: {
              type: 'plain_text',
              text: 'üëã –ü—Ä–∏–≤—ñ—Ç, —Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ!',
              emoji: true
            }
          },
          {
            type: 'divider'
          },
          {
            type: 'rich_text',
            elements: [
              {
                type: 'rich_text_section',
                elements: [
                  {
                    type: 'text',
                    text: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∑ Teacher Booking –Ω–∞–¥–∞—î –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è'
                  },
                  {
                    type: 'text',
                    text: ' –∞–∫—Ç—É–∞–ª—å–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é',
                    style: {
                      bold: true
                    }
                  },
                  {
                    type: 'text',
                    text: ':\n'
                  }
                ]
              },
              {
                type: 'rich_text_list',
                style: 'bullet',
                indent: 0,
                border: 0,
                elements: [
                  {
                    type: 'rich_text_section',
                    elements: [
                      {
                        type: 'text',
                        text: '–ó–≤—ñ—Ç–∏ –≤—ñ–¥ –í—ñ–¥–¥—ñ–ª—É –ö–æ–Ω—Ç—Ä–æ–ª—è –Ø–∫–æ—Å—Ç—ñ'
                      }
                    ]
                  },
                  {
                    type: 'rich_text_section',
                    elements: [
                      {
                        type: 'text',
                        text: '–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ñ –∑–∞–ø–∏—Ç–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤ –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é '
                      },
                      {
                        type: 'text',
                        text: '–ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è',
                        style: {
                          bold: true
                        }
                      },
                      {
                        type: 'text',
                        text: ' –∞–±–æ '
                      },
                      {
                        type: 'text',
                        text: '–≤—ñ–¥–º—ñ–Ω–∏',
                        style: {
                          bold: true
                        }
                      }
                    ]
                  }
                ]
              },
              {
                type: 'rich_text_section',
                elements: []
              }
            ]
          },
          isSync
            ? {
                type: 'section',
                text: {
                  type: 'mrkdwn',
                  text: `‚úÖ *–í–∞—à –∞–∫–∞—É–Ω—Ç –≤–∂–µ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º ${user.name} (${user.email})!*`
                }
              }
            : {
                type: 'actions',
                elements: [
                  {
                    type: 'button',
                    text: {
                      type: 'plain_text',
                      text: 'üîó –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è'
                    },
                    action_id: 'sync_account'
                  }
                ]
              }
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ App Home:', error);
  }
});

slackApp.action('sync_account', async ({body, ack, client}) => {
  await ack();

  await client.views.open({
    trigger_id: body.trigger_id,
    view: {
      type: 'modal',
      callback_id: 'login_submit',
      title: {
        type: 'plain_text',
        text: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç–∞'
      },
      blocks: [
        {
          type: 'input',
          block_id: 'email_block',
          element: {
            type: 'plain_text_input',
            action_id: 'email_input',
            placeholder: {
              type: 'plain_text',
              text: '–ü–æ—à—Ç–∞ –≤—ñ–¥ –±—É–∫—ñ–Ω–≥–∞'
            }
          },
          label: {
            type: 'plain_text',
            text: '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à Email'
          }
        },
        {
          type: 'input',
          block_id: 'password_block',
          element: {
            type: 'plain_text_input',
            action_id: 'password_input',
            placeholder: {
              type: 'plain_text',
              text: '–ü–∞—Ä–æ–ª—å –≤—ñ–¥ –±—É–∫—ñ–Ω–≥–∞'
            }
          },
          label: {
            type: 'plain_text',
            text: '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å'
          }
        }
      ],
      submit: {
        type: 'plain_text',
        text: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è'
      },
      close: {
        type: 'plain_text',
        text: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
      }
    }
  });
});

slackApp.view('login_submit', async ({view, ack, body, client}) => {
  await ack();

  const email = view.state.values.email_block.email_input.value;
  const password = view.state.values.password_block.password_input.value;
  const slackUserId = body.user.id;

  console.log(`–°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É: ${email}, Slack ID: ${slackUserId}`);

  try {
    const response = await fetch(
      'https://dolphin-app-b3fkw.ondigitalocean.app/api/auth/slackSync',
      {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({email, password, slackUserId})
      }
    );

    const result = await response.json();
    console.log(result);
    if (result.success) {
      await client.chat.postMessage({
        channel: slackUserId,
        text: '‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ Teacher Booking!'
      });
    } else {
      await client.chat.postMessage({
        channel: slackUserId,
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email —ñ –ø–∞—Ä–æ–ª—å.'
      });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:', error);

    await client.chat.postMessage({
      channel: slackUserId,
      text: '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
    });
  }
});
