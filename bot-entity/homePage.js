const {slackApp} = require('./slack');

slackApp.event('app_home_opened', async ({event, client}) => {
  try {
    await client.views.publish({
      user_id: event.user,
      view: {
        type: 'home',
        blocks: [
          {
            type: 'section',
            text: {
              type: 'mrkdwn',
              text: 'üëã –ü—Ä–∏–≤—ñ—Ç, —Ä–∞–¥–∏–π –±–∞—á–∏—Ç–∏ —Ç–µ–±–µ. –î–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–∑–≤–æ–ª—è—î –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—ñ–≤, –æ—Ü—ñ–Ω–∫—É –í–ö–Ø —Ç–∞ —ñ–Ω—à—ñ'
            }
          },
          {
            type: 'actions',
            elements: [
              {
                type: 'button',
                text: {
                  type: 'plain_text',
                  text: 'üîó –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è'
                },
                action_id: 'sync_account'
              }
            ]
          }
        ]
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ App Home:', error);
  }
});

app.action('sync_account', async ({body, ack, client}) => {
  await ack();

  // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ –ø–æ–ª—è–º–∏ –¥–ª—è –ª–æ–≥—ñ–Ω—É
  await client.views.open({
    trigger_id: body.trigger_id,
    view: {
      type: 'modal',
      callback_id: 'login_submit',
      title: {
        type: 'plain_text',
        text: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—è –∞–∫–∞—É–Ω—Ç–∞'
      },
      blocks: [
        {
          type: 'input',
          block_id: 'email_block',
          element: {
            type: 'plain_text_input',
            action_id: 'email_input'
          },
          label: {
            type: 'plain_text',
            text: '–í–≤–µ–¥—ñ—Ç—å –≤–∞—à Email'
          }
        },
        {
          type: 'input',
          block_id: 'password_block',
          element: {
            type: 'plain_text_input',
            action_id: 'password_input',
            type: 'password'
          },
          label: {
            type: 'plain_text',
            text: '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å'
          }
        }
      ],
      submit: {
        type: 'plain_text',
        text: '–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É–≤–∞—Ç–∏—Å—è'
      },
      close: {
        type: 'plain_text',
        text: '–°–∫–∞—Å—É–≤–∞—Ç–∏'
      }
    }
  });
});

app.view('login_submit', async ({view, ack, body, client}) => {
  await ack();

  const email = view.state.values.email_block.email_input.value;
  const password = view.state.values.password_block.password_input.value;
  const slackUserId = body.user.id;

  console.log(`–°–ø—Ä–æ–±–∞ –ª–æ–≥—ñ–Ω—É: ${email}, Slack ID: ${slackUserId}`);

  try {
    const response = await fetch(
      'https://dolphin-app-b3fkw.ondigitalocean.app/api/auth/slackSync',
      {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({email, password, slackUserId})
      }
    );

    const result = await response.json();

    if (result.success) {
      await client.chat.postMessage({
        channel: slackUserId,
        text: '‚úÖ –í–∞—à –∞–∫–∞—É–Ω—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–æ–≤–∞–Ω–æ –∑ Teacher Booking!'
      });
    } else {
      await client.chat.postMessage({
        channel: slackUserId,
        text: '‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ email —ñ –ø–∞—Ä–æ–ª—å.'
      });
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ª–æ–≥—ñ–Ω—É:', error);

    await client.chat.postMessage({
      channel: slackUserId,
      text: '‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.'
    });
  }
});
